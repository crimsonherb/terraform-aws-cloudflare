name: Terraform Plan

on:
  pull_request:
    branches:
      - main

permissions:
  pull-requests: write

jobs:
  terraform:
    runs-on: ubuntu-latest

    env:
      # Secret
      TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
      TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      TF_VAR_cloudflare_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
      TF_VAR_site_domain: ${{ secrets.SITE_DOMAIN }}

      TF_VAR_error_document: "error.html"
      TF_VAR_index_document: "index.html"
      TF_VAR_environment: "production"

    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      - name: Terraform Format Check
        run: terraform fmt -check
        working-directory: terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: terraform

      - name: Terraform Plan and Save Output
        id: plan
        run: |
          terraform plan -no-color > plan_output.txt
        working-directory: terraform

      - name: Comment PR with Plan Output
        if: success()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('terraform/plan_output.txt', 'utf8');
            const truncatedPlan = plan.length > 65000
              ? plan.slice(0, 65000) + '\n\n[...output truncated]'
              : plan;

            const comment = [
              '#### ðŸ›  Terraform Plan Result',
              '',
              '<details><summary>Click to expand</summary>',
              '',
              '```hcl',
              truncatedPlan,
              '```',
              '',
              '</details>',
              '',
              `*Triggered by @${{ github.actor }} on PR #${{ github.event.pull_request.number }}*`
            ].join('\n');

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });